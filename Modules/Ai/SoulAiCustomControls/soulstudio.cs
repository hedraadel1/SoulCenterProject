//-----------------------------------------------------------------------
// <copyright file="soulstudio.cs" company="Onoo">
//     Author: Eng Hedra Adel
//     Copyright (c) Onoo. All rights reserved.
// </copyright>
//-----------------------------------------------------------------------

using DevExpress.CodeParser;
using DevExpress.Utils;
using DevExpress.XtraBars;
using DevExpress.XtraBars.Docking2010;
using DevExpress.XtraBars.ToastNotifications;
using DevExpress.XtraEditors;
using DevExpress.XtraEditors.Controls;
using DevExpress.XtraEditors.Popup;
using DevExpress.XtraGrid.Views.Base;
using DevExpress.XtraGrid.Views.Grid;
using DevExpress.XtraTreeList;
using DevExpress.XtraTreeList.Nodes;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using SoulCenterProject.Helpers.Utils;
using SoulCenterProject.Models.Soul_Models;
using SoulCenterProject.Modules.Ai.Services;
using SoulCenterProject.Modules.Ai.Views;
using SoulCenterProject.SoulControls;
using SoulCenterProject.SoulControls.ComponentsTypes;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Globalization;
using System.Linq;
using System.Net.Http;
using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Windows.Threading;
using Telerik.WinControls.UI;
using Telerik.WinForms.Documents.FormatProviders.Txt;
using ChatMessage = SoulCenterProject.Modules.Ai.Services.ChatMessage;



namespace SoulCenterProject
{
    [DebuggerDisplay("{" + nameof(GetDebuggerDisplay) + "(),nq}")]
    public partial class soulstudio : UserControl
    {
        string lblRequestsToday;
        string lblTokensToday;
        private IDbConnection _conn;
        private ChatOverlayMessage overlayMessage;
        bool IsDevandTelerikInputsVisiable = false;
        private Stopwatch _stopwatch;
        private string apiKey = "AIzaSyAOhXQtle2SHm-LC6KcoG_2NOFMbTP9n_w";
        private List<ChatMessage> SentconversationHistory;
        private SoultextEditor deveditor;
        GeneralTools _generalTools = new GeneralTools();
        private Soultexteditortelerik teleditor;
        private BackgroundWorker worker = new BackgroundWorker();
        public string connectionString =
            "Server=178.18.251.168;Database=newgyral_erpnew;Uid=newgyral_erpnew;Pwd=Mm102030@@@;";
        string systemInstructionsOutput;
        string promptOutput;
        private SoulStudioService soulStudioService;
        private ConversationManagerService conversationManagerService;
        string conversationId = "";

        public List<ChatMessage> LastSentconversationHistory;
        private XtraForm comeform;
        private UsageTracker usageTracker;
        private ListView Listview_LogControl;
        public soulstudio(XtraForm formconForm = null)
        {
            InitializeComponent();
            SetupForm(formconForm);
            InitializeComponents();
            Listview_LogControl = new ListView();
            SetupDataSources();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill the SqlDataSource asynchronously
            sqlDataSource1.FillAsync();

            worker = new BackgroundWorker();
            worker.DoWork += tokensandwordscounter;
            worker.ProgressChanged += worker_ProgressChanged;
            worker.WorkerReportsProgress = true;
        }


        private async void Button_SendToAiModel_Click2(object sender, EventArgs e)
        {

        }

        private void AiWorker_DoWork(object sender, DoWorkEventArgs e)
        {

        }

        private void AiWorker_ProgressChanged(object sender, ProgressChangedEventArgs e)
        {

        }

        private void AiWorker_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {

        }
        public string generatedTextforui { get; private set; }
        public string lblRequestsPerMinute { get; private set; }
        public string lblTokensPerMinute { get; private set; }
        public int wordscount { get; private set; }

        private void SetupForm(XtraForm formconForm)
        {
            if (formconForm != null)
            {
                this.comeform = formconForm;
            }
        }

        private void GetConverstionID()
        {
            conversationId = GridLookUpEdit_Converstions.EditValue.ToString();
        }
        private void InitializeComponents()
        {
            usageTracker = new UsageTracker();
            //  ربط الأحداث (Events)  بالتوابع (Handlers)
            usageTracker.UsageWarning += UsageTracker_UsageWarning;
            usageTracker.MinuteLimitReached += UsageTracker_MinuteLimitReached;
            _stopwatch = new Stopwatch();
        }

        //  التابع  الخاص  بحدث  UsageWarning
        private void UsageTracker_UsageWarning(object sender, EventArgs e)
        {
            MessageBox.Show("تحذير:  لقد  تمّ  استهلاك  90%  من  الحد  الأقصى  اليومي!",
                            "تحذير", MessageBoxButtons.OK, MessageBoxIcon.Warning);
        }

        //  التابع  الخاص  بحدث  MinuteLimitReached
        private void UsageTracker_MinuteLimitReached(object sender, EventArgs e)
        {
            MessageBox.Show("خطأ:  لقد  تمّ  تجاوز  الحد  الأقصى  في  الدقيقة!  يرجى  الانتظار.",
                            "خطأ", MessageBoxButtons.OK, MessageBoxIcon.Error);
        }

        private void AddRequest()
        {
            usageTracker.IncreaseRequests();
            UpdateUsageDisplay();  //  تحديث  العرض  بعد  التعديل
        }
        private void AddTokens(int tokens)
        {
            //  افترضنا  إنّ  فيه  TextBox   اسمه  txtTokensCount  لإدخال  عدد  الـ  Tokens
            if (tokens > 0)
            {
                usageTracker.IncreaseTokens(tokens);
                UpdateUsageDisplay(); //  تحديث  العرض  بعد  التعديل
            }
            else
            {
                MessageBox.Show("يرجى  إدخال  عدد  صحيح  لـ  Tokens.", "خطأ", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }
        private void ResetCounters()
        {
            usageTracker.ResetCounters(manualReset: true);
            UpdateUsageDisplay(); //  تحديث  العرض  بعد  التعديل
        }

        private void UpdateUsageDisplay()
        {
            //  عرض  بيانات  اليوم
            lblRequestsToday = $"الطلبات  اليوم:  {usageTracker.data.RequestsCount} / {usageTracker.limits.RequestsPerDay}";
            lblTokensToday = $"الـ  Tokens   اليوم:   {usageTracker.data.TokensCount}   /   {usageTracker.limits.TokensPerDay}";

            //  حساب  البيانات  المتبقية  لليوم
            int requestsRemainingToday = usageTracker.limits.RequestsPerDay - usageTracker.data.RequestsCount;
            int tokensRemainingToday = usageTracker.limits.TokensPerDay - usageTracker.data.TokensCount;


            //  عرض  بيانات  الدقيقة
            lblRequestsPerMinute = $"الطلبات  في  الدقيقة:  {usageTracker.data.RequestsCount} / {usageTracker.limits.RequestsPerMinute}";
            lblTokensPerMinute = $"الـ  Tokens   في  الدقيقة:   {usageTracker.data.TokensCount}   /   {usageTracker.limits.TokensPerMinute}";

            //  حساب  البيانات  المتبقية  للدقيقة
            int requestsRemainingMinute = usageTracker.limits.RequestsPerMinute - usageTracker.data.RequestsCount;
            int tokensRemainingMinute = usageTracker.limits.TokensPerMinute - usageTracker.data.TokensCount;
            Textbox_PromptInput_Textbox.Text = lblRequestsToday + "////" + lblTokensToday;
        }
        private void ConfigureEditors()
        {
            AddEditDeleteButtonsToDataGridView();
            deveditor = new SoultextEditor();
            teleditor = new Soultexteditortelerik();
            deveditor.Dock = DockStyle.Fill;
            teleditor.Dock = DockStyle.Fill;
            editorpanel.Controls.Add(deveditor);
            editorpanel.Controls.Remove(deveditor);
            editorpanel.Controls.Add(teleditor);
            if (Barbutton_edtiortype.Checked)
            {
                if (CheckButton_displayeditorribon.Checked)
                {
                    teleditor.richTextEditorRibbonBar1.Visible = true;
                }
                else
                {
                    teleditor.richTextEditorRibbonBar1.Visible = false;
                }
            }
        }
        private string GetTelrikandDevexpressEditorsContent()
        {
            try
            {
                if (IsDevandTelerikInputsVisiable)
                {
                    if (Barbutton_edtiortype.Checked)
                    {
                        return teleditor.richTextEditorRibbonBar1.Text;
                    }
                    else
                    {
                        return deveditor.richEditControl1.Text;
                    }
                }
                else
                {
                    return "";
                }
            }
            catch (Exception exception)
            {
                string ExceptionError = "there is error when try to get editor's content , the error is : " + exception.Message;
                return ExceptionError;
            }
        }
        private void SetupDataSources()
        {
            soulStudioService = new SoulStudioService(connectionString);
            conversationManagerService = new ConversationManagerService(connectionString);
            _conn = ConnectionFactory.CreateConnection();
            sqlDataSource1.FillAsync();
        }

        private void BarButton_Browser_ItemClick(object sender, ItemClickEventArgs e)
        {
            GeneralTools _generalTools = new GeneralTools();
            string filePath = @"E:\requestBody.txt";

            string lastchat = _generalTools.ReadTextFile(filePath);

            TxtFormatProvider provider = new TxtFormatProvider();
            this.GeneralRichText.Document = provider.Import(lastchat);


            FlyoutPanel_Richtext.ShowPopup();
        }

        private void Barbutton_edtiortype_CheckedChanged(object sender, ItemClickEventArgs e)
        {
            if (!IsDevandTelerikInputsVisiable)
            {
                ConfigureEditors();
                IsDevandTelerikInputsVisiable = true;
            }
            if (Barbutton_edtiortype.Checked == false)
            {
                editorpanel.Controls.Remove(deveditor);
                editorpanel.Controls.Add(teleditor);
            }
            else
            {
                editorpanel.Controls.Remove(deveditor);
                editorpanel.Controls.Add(teleditor);
            }

            if (Barbutton_edtiortype.Checked)
            {
                if (CheckButton_displayeditorribon.Checked)
                {
                    teleditor.richTextEditorRibbonBar1.Visible = true;
                }
                else
                {
                    teleditor.richTextEditorRibbonBar1.Visible = false;
                }
            }
        }
        private async void BarButton_JsonResponse_ItemClick(object sender, ItemClickEventArgs e)
        {
            try
            {
                string lastresponse = await Task.Run(() =>
                {
                    GeneralTools loadfile = new GeneralTools();
                    return loadfile.GetLastApiRequestOrResponse("response");
                });

                //  تحديث  UI  من  UI  thread
                Invoke((MethodInvoker)(() =>
               {
                   SoulCodeIDE msgctr = new SoulCodeIDE();
                   msgctr.CodeContent = lastresponse;

                   if (XtraDialog.Show(msgctr, "response Json", MessageBoxButtons.OKCancel) == DialogResult.OK)
                   {

                   }
               }));
            }
            finally
            {

            }
        }

        private async void BarButton_JsonRequest_ItemClick(object sender, ItemClickEventArgs e)
        {
            try
            {
                string lastrequest = await Task.Run(() =>
                {

                    GeneralTools loadfile = new GeneralTools();
                    return loadfile.GetLastApiRequestOrResponse("request");
                });

                this.Invoke((MethodInvoker)(() =>
                {
                    SoulCodeIDE msgctr = new SoulCodeIDE();
                    msgctr.CodeContent = lastrequest;

                    if (XtraDialog.Show(msgctr, "Request Json", MessageBoxButtons.OKCancel) == DialogResult.OK)
                    {
                        //  معالجة  النقر  على  "OK"
                    }
                }));
            }
            finally
            {

            }
        }
        private void BtnDown_Click(object sender, EventArgs e)
        {
            throw new NotImplementedException();
        }

        private void BtnRemove_Click(object sender, EventArgs e)
        {
            throw new NotImplementedException();
        }

        private void BtnUp_Click(object sender, EventArgs e)
        {
        }

        private void Button_CloseBarButton_ItemClick(object sender, ItemClickEventArgs e)
        {
            try
            {
                Application.Exit();
            }
            catch (Exception exception)
            {
                MessageBox.Show(exception.Message);
            }
        }

        private void ResetMaxOutput()
        {
            // تحديث واجهة المستخدم من خلال Invoke 
            this.Invoke((MethodInvoker)delegate
            {

                Text_ModelMaxOutputTokens.Text = "0000";
                Text_RemainModelMaxOutputTokens.Text = "0000";
                Text_SelectedModelMaxOutputTokens.Text = "0000";

                Progressbar_OutputTokens.Value1 = 0;
                Progressbar_OutputTokens.Value2 = 0;
                Progressbar_OutputTokens.Maximum = 100;

                SpinEditor_SelectedModelMaxOutputTokens.Value = 0;
                SpinEditor_SelectedModelMaxOutputTokens.Maximum = 0;
                TrackBar_SelectedModelMaxOutputTokens.Value = 0;
                TrackBar_SelectedModelMaxOutputTokens.Properties.Maximum = 100;
            });

        }

        private void ResetMaxInput()
        {
            // تحديث واجهة المستخدم من خلال Invoke 
            this.Invoke((MethodInvoker)delegate
            {
                Text_ModelMaxInputTokens.Text = "0000";
                Text_RemainModelMaxInputTokens.Text = "0000";
                Text_SelectedModelMaxInputTokens.Text = "0000";

                Progressbar_InputTokens.Value1 = 0;
                Progressbar_InputTokens.Value2 = 0;
                Progressbar_InputTokens.Maximum = 100;

                SpinEditor_SelectedModelMaxInputTokens.Value = 0;
                SpinEditor_SelectedModelMaxInputTokens.Maximum = 0;
                TrackBar_SelectedModelMaxInputTokens.Value = 0;
                TrackBar_SelectedModelMaxInputTokens.Properties.Maximum = 100;
            });

        }

        private void Button_ExitBarButton_ItemClick(object sender, ItemClickEventArgs e)
        {
            Application.Exit();
        }

        private void Button_getstructure_Click(object sender, EventArgs e)
        {
            //DisplayProgress.Visible = true;

            //Button_TestEdit.Enabled = false;
            //string url = Textbox_Url.Text;

            //worker.RunWorkerAsync(new Tuple<OperationType, string>(OperationType.GetStructure, url;
        }

        private void Button_MinBarButton_ItemClick(object sender, ItemClickEventArgs e)
        {
            comeform.WindowState = FormWindowState.Minimized;
        }

        private async void Button_SendToAiModel_Click(object sender, EventArgs e)
        {
            await SendmessagetoaimodelAsync();
        }

        private void Button_SendToAiModel_ToggleStateChanged(object sender, StateChangedEventArgs args)
        {
        }

        private async void Button_Testdelete_Click(object sender, EventArgs e)
        {

        }

        private void Button_TestEdit_Click(object sender, EventArgs e)
        {
            comeform.WindowState = FormWindowState.Minimized;
        }

        private void ButtonEdit_ButtonClick(object sender, ButtonPressedEventArgs e)
        {
            //if (e.Button.Kind == ButtonPredefines.SpinUp)
            //{
            //    MoveNodeVertically(false); // Move down
            //}

            //if (e.Button.Kind == ButtonPredefines.Clear)
            //{
            //    TreeListNode node = Treelist_PromptComponanents.FocusedNode;
            //    if (node != null)
            //    {
            //        node.Remove();
            //    }
            //}

            //if (e.Button.Kind == ButtonPredefines.OK)
            //{
            //    TreeListNode node = Treelist_PromptComponanents.FocusedNode;
            //    if (node != null)
            //    {
            //        MessageBox.Show(
            //            Treelist_PromptComponanents.FocusedNode
            //                .GetValue(Treelist_PromptComponanents.Columns["treeListColumn1"])
            //                .ToString());
            //    }
            //}

            //if (e.Button.Kind == ButtonPredefines.SpinDown)
            //{
            //    //  MoveNodeVertically(true); // Move down
            //    Treelist_PromptComponanents.MoveNext();
            //}
        }

        private void CheckButton_displayeditorribon_CheckedChanged(object sender, ItemClickEventArgs e)
        {
            if (Barbutton_edtiortype.Checked)
            {
                if (CheckButton_displayeditorribon.Checked)
                {
                    teleditor.richTextEditorRibbonBar1.Visible = true;
                }
                else
                {
                    teleditor.richTextEditorRibbonBar1.Visible = false;
                }
            }
        }

        private void Combobox_Prompt_SelectedIndexChanged(object sender, EventArgs e)
        {
        }

        private void comboBoxEdit1_SelectedIndexChanged(object sender, EventArgs e)
        {
        }

        private void gridLookUpEdit1View_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Delete && e.Modifiers == Keys.Control)
            {
                if (MessageBox.Show("Delete row?", "Confirmation", MessageBoxButtons.YesNo) != DialogResult.Yes)
                {
                    return;
                }

                GridView view = sender as GridView;
                view.DeleteRow(view.FocusedRowHandle);
            }
        }

        private void gridLookUpEdit1View_RowUpdated(object sender, RowObjectEventArgs e)
        {
        }

        private bool IsServiceColumn(LookUpEdit edit, string fieldName)
        {
            return fieldName == edit.Properties.ValueMember || fieldName == edit.Properties.DisplayMember;
        }

        private void ListBox_Sitestructure_SelectedIndexChanged(object sender, EventArgs e)
        {
            //if(ListBox_Sitestructure.SelectedItem != null)
            //{
            //    string selectedItem = ListBox_Sitestructure.SelectedItem.ToString();
            //    string[] parts = selectedItem.Split(new[] { ' ' }, 2);
            //    string elementName = parts[0];
            //    string className = parts[1].Trim('(', ')');
            //    string url = Textbox_Url.Text;


            //    worker.RunWorkerAsync(
            //        new Tuple<OperationType, string, string, string>(
            //            OperationType.ExtractContent,
            //            url,
            //            elementName,
            //            className;
            //}
        }

        private void lookUpEdit1_CustomDrawCell(object sender, LookUpCustomDrawCellArgs e)
        {
            LookUpEdit edit = sender as LookUpEdit;
            if (IsServiceColumn(edit, e.Column.FieldName))
            {
                e.Appearance.BackColor = Color.Yellow;
                e.Appearance.ForeColor = Color.White;
            }
        }

        private void lookUpEdit1_CustomDrawHeader(object sender, LookUpCustomDrawHeaderArgs e)
        {
            LookUpEdit edit = sender as LookUpEdit;
            if (IsServiceColumn(edit, e.Header.Column.FieldName))
            {
                e.Graphics.FillRectangle(new SolidBrush(Color.FromArgb(255, 55, 0)), e.Bounds);
                e.Graphics.DrawString(e.Header.Caption, e.Header.Appearance.Font, Brushes.White, e.Header.CaptionRect);
                e.Handled = true;
            }
        }

        private void lookUpEdit1_CustomDrawRow(object sender, LookUpCustomDrawRowArgs e)
        {
            if (e.IsSelected)
            {
                using (HatchBrush brush = new HatchBrush(
                           HatchStyle.Weave,
                           Color.FromArgb(30, Color.FromArgb(247, 5, 255)),
                           Color.FromArgb(120, Color.White)))
                {
                    e.DefaultDraw();
                    e.Cache.FillRectangle(brush, e.Bounds);
                    e.Handled = true;
                }
            }
        }

        private void lookUpEdit1_Properties_CustomDrawHeader(object sender, LookUpCustomDrawHeaderArgs e)
        {
            LookUpEdit edit = sender as LookUpEdit;
            if (IsServiceColumn(edit, e.Header.Column.FieldName))
            {
                e.Graphics.FillRectangle(new SolidBrush(Color.FromArgb(0, 255, 8)), e.Bounds);
                e.Graphics.DrawString(e.Header.Caption, e.Header.Appearance.Font, Brushes.White, e.Header.CaptionRect);
                e.Handled = true;
            }
        }

        private void Messages_DocumentTabStrip_TextChanged(object sender, EventArgs e)
        {
        }

        private void MoveNodeVertically(bool isDown)
        {
            //TreeListNode node = Treelist_PromptComponanents.FocusedNode;
            //if (node != null)
            //{
            //    int currentIndex = Treelist_PromptComponanents.GetNodeIndex(node);
            //    int newIndex = currentIndex + (isDown ? 1 : -1);


            //    // Check if new index is within bounds
            //    if (newIndex >= 0 && newIndex < Treelist_PromptComponanents.Nodes.Count)
            //    {
            //        Treelist_PromptComponanents.SetNodeIndex(node, newIndex);
            //    }
            //}
        }

        private void radButton36_Click_1(object sender, EventArgs e)
        {
        }

        private void radButton4_Click(object sender, EventArgs e)
        {
        }

        private async void radButton5_Click(object sender, EventArgs e)
        {

        }

        private void soulstudio_KeyDown(object sender, KeyEventArgs e)
        {
            // Check if Ctrl + Space keys are pressed.
            if (e.KeyCode == Keys.Space && e.KeyCode == Keys.Alt)
            {
                _ = SendmessagetoaimodelAsync();
            }
        }


        private async Task SendmessagetoaimodelAsync()
        {
            try
            {
                ////////////////////////////////////////////////
                Report_SoulLog_SendingPrompt();
                ///////////////////////////////////////////////

                if (GridLookUpEdit_Converstions.EditValue == null)
                {
                    MessageBox.Show("Please Choose the Agent and Converstion please");
                }
                else
                {
                    await SendRequestAsyncMultiTask(false);
                }
            }
            catch (Exception ex)
            {
                string currentFunctionName = System.Reflection.MethodBase.GetCurrentMethod().Name;
                AddError(ex, currentFunctionName);
            }

        }

        private void AddError(Exception ex, string currentFunctionName)
        {

            AddlogText("Error in :" + currentFunctionName);
            AddlogText("=====================================");
            AddlogText(ex.Message);
            MessageBox.Show(ex.Message);
            AddlogText("=====================================");
        }
        private void Report_SoulLog_SendingPrompt()
        {
            ////////////////////////////////////////////////
            SoulLog log = new SoulLog
            {
                LogAddress = "Sending User Prompt",
                LogDetails = "sending the prompt .. Step 1 : 4",
                Step = OperationStep.Working
            };

            ReportSoulLog(log);
            ///////////////////////////////////////////////
        }


        private async Task SetConverstionHistoryAsync()
        {

            List<ChatMessage> conversationHistory = await GetConversationHistoryAsync(Convert.ToInt32(conversationId));

            //  fill this var to use in other task
            LastSentconversationHistory = conversationHistory;
        }


        private void AddlogText2(string text, Color textColor = default, bool isBold = false, float fontSize = 10f,
        string fontName = "Tahoma", LogLevel logLevel = LogLevel.Info)
        {
            if (Text_FullLogtext.InvokeRequired)
            {
                Text_FullLogtext.Invoke(new Action(() => AddlogText2(text, textColor, isBold, fontSize, fontName, logLevel)));
                return;
            }

            // Timestamp
            string timestamp = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");

            // Font
            Font logFont = new Font(fontName, fontSize, isBold ? FontStyle.Bold : FontStyle.Regular);

            // لون النص بناءً على مستوى الـ log (باستخدام if-else بدل switch)
            Color levelColor;
            if (logLevel == LogLevel.Error)
            {
                levelColor = Color.Red;
            }
            else if (logLevel == LogLevel.Warning)
            {
                levelColor = Color.Orange;
            }
            else
            {
                levelColor = Color.Blue;
            }

            //  لو  تمّ  إرسال  textColor  استخدمه،  وإلا  استخدم  levelColor
            Text_FullLogtext.SelectionColor = textColor == default ? levelColor : textColor;

            //  إضافة  log entry
            Text_FullLogtext.SelectionFont = logFont;
            Text_FullLogtext.SelectionColor = Color.Green;
            Text_FullLogtext.AppendText($"[{timestamp}] ");
            Text_FullLogtext.AppendText($"{logLevel}: {text}" + Environment.NewLine);

            Text_FullLogtext.SelectionStart = Text_FullLogtext.TextLength;
            Text_FullLogtext.ScrollToCaret();
        }

        private void AddlogText(string text, Color textColor = default)
        {
            if (Text_FullLogtext.InvokeRequired)
            {
                Text_FullLogtext.Invoke(new Action(() => AddlogText(text, textColor)));
                return;
            }

            //  لون الفواصل (أخضر)
            Text_FullLogtext.SelectionColor = Color.Green;
            Text_FullLogtext.AppendText("============" + Environment.NewLine);

            if (textColor == default)
            {
                Text_FullLogtext.SelectionColor = Color.Blue;
            }
            else
            {
                Text_FullLogtext.SelectionColor = textColor;
            }
            Text_FullLogtext.AppendText(text);

            //  لون الفواصل (أخضر)
            Text_FullLogtext.SelectionColor = Color.Green;
            Text_FullLogtext.AppendText(Environment.NewLine + "============" + Environment.NewLine);

            Text_FullLogtext.SelectionStart = Text_FullLogtext.TextLength;
            Text_FullLogtext.ScrollToCaret();
        }
        private void SetProgress(System.Windows.Forms.ProgressBar progressBar, bool status)
        {
            if (Text_FullLogtext.InvokeRequired)
            {
                // Corrected Invoke call using Action delegate:
                Text_FullLogtext.Invoke(new Action(() => SetProgress(progressBar, status)));
                return;
            }

            if (status)
            {
                if (!progressBar.Visible)
                {
                    progressBar.Visible = true;
                }
                else
                {
                    progressBar.Visible = false;
                }
            }
        }
        private async Task<object> SendRequestAsyncMultiTask(bool IsFunctionCall)
        {
            /*- Create GeminiAiService instance
              - Get the System Instructions UserPrompt after Build them  
              - Prepare User Message Container For ui 
              - Prepare Ai Message Container For ui 
              - Calculate Tokens 
              - Calculate Words 
              - Add Request Counter 
              - Add Tokens Counter 
              - Send The Request And Wait to Get the Response in generatedText String var 
              - Update Ui Message Container with AI Response(generatedText) 
              - Save Messages To Database and Txt File  
              - Add Conversation History To UI */


            try
            {
                GeminiAiService gemini = new GeminiAiService();
                if (!IsFunctionCall)
                {
                    userMessage = GetUserInputMessage();
                }

                try
                {
                    LogStep("SendRequestAsync() method", "Sends and waits for the generated response. Step 2:4");

                    AddlogText("Excuteing now : PrepareUserMessageContainer");
                    MessagesContainer userMessageContainer = PrepareUserMessageContainer(userMessage);

                    AddlogText("Excuteing now : PrepareAIResponseContainer");
                    MessagesContainer aiResponseContainer = PrepareAIResponseContainer();

                    AddlogText("Excuteing now : CalculateTokens");
                    int Tokenscount = CalculateTokens(userMessage, LastSentconversationHistory);

                    AddlogText("Excuteing now : Countwords");
                    int wordscount = Countwords(userMessage);

                    AddlogText("Excuteing now : AddRequest");
                    AddRequest();

                    AddlogText("Excuteing now : AddTokens");
                    AddTokens(Tokenscount);


                    AddlogText("Excuteing now : GenerateResponse");
                    string generatedText;


                    if (SplitTaskRequest)
                    {
                         generatedText = await GenerateResponse(gemini, userMessage, LastSentconversationHistory,"application/json");

                        ResponseToSplittedTasks(generatedText);
                    }
                    else
                    {
                        generatedText = await GenerateResponse(gemini, userMessage, LastSentconversationHistory);

                    }

                    await Task.Run(() =>
                    {
                        AddlogText("Add the Response To the Message's Panel : UpdateAIResponseContainer");
                        UpdateAIResponseContainer(aiResponseContainer, generatedText);
                    });

                    await SaveTheUserMessageAndAiResponse(userMessage, generatedText);

                    //Add the New User Prompt with the Conversation History that sent to the Ai To the RadChat (Use for me to review some stuff)
                    AddlogText("Add the New User Prompt with the Conversation History : AddConversationHistoryToUI + AddConversationHistoryToRadChat");

                    await Task.Run(() =>
                    {
                        //Add the New User Prompt with the Conversation History that sent to the Ai To the RadChat (Use for me to review some stuff)
                        AddConversationHistoryToUI(LastSentconversationHistory, userMessage);
                    });


                    AddlogText("Returning Now generatedText");


                    //  بعد  (Add  Conversation  History  To  UI)

                    string extractedJson = ExtractJsonFromResponse2(generatedText);
                    if (extractedJson != null)
                    {
                        SoulFunctionCallRequest functionCallRequest = AnalyzeResponseForFunctionCall(extractedJson);
                        if (functionCallRequest != null)
                        {
                            // object functionResult = ExecuteSoulFunction(functionCallRequest);
                            //  بعد  ما  نستدعي   ExecuteSoulFunction 
                            SoulFunctionResult functionResult = ExecuteSoulFunction(functionCallRequest);

                            //  الرد  هيكون  بالشكل  ده  
                            string newPrompt = @" Function " + functionCallRequest.FunctionName + "returned : " + functionResult.Result?.ToString();

                            //  بناء  UserPrompt  جديد  بناءً  على  نتيجة  الـ  function
                            userMessage = newPrompt;

                            //  إرسال  Request  جديد  مع  نتيجة  الـ  function
                            await SendRequestAsyncMultiTask(true);
                        }
                    }


                    AddlogText("Returning Now generatedText");

                    await AnalyzeAndProcessCode(generatedText);

                    return generatedText;

                }
                catch (Exception ex)
                {
                    string currentFunctionName = System.Reflection.MethodBase.GetCurrentMethod().Name;
                    AddError(ex, currentFunctionName);

                    return null;
                }
            }
            catch (Exception ex)
            {
                string currentFunctionName = System.Reflection.MethodBase.GetCurrentMethod().Name;
                AddError(ex, currentFunctionName);
                return null;
            }
        }

        private async Task AnalyzeAndProcessCode(string responseText)
        {
            string[] lines = responseText.Split(new[] { Environment.NewLine }, StringSplitOptions.None);
            var result = Regex.Split(responseText, "\r\n|\r|\n");
            string codeLanguage = null;
            string codeIsFor = null;
            string taskName = null;
            string codeBlock = "";
            bool istaskname = false;
            bool istaskfor = false;
            bool insideCodeBlock = false;

            foreach (string line in result)
            {
                if (line.StartsWith("```"))
                {
                    if (!insideCodeBlock)
                    {
                        // بداية كتلة كود
                        insideCodeBlock = true;
                        codeLanguage = line.Substring(3).Trim();
                    }
                    else if (insideCodeBlock)
                    {
                        // نهاية كتلة كود
                        insideCodeBlock = false;

                        //  تم  نقل  الجزء  ده  إلى  هنا
                        if (codeLanguage != null)
                        {
                            string tempCodeLanguage = codeLanguage;
                            string tempCodeIsFor = codeIsFor;
                            string tempTaskName = taskName;

                            Code codeContent = new Code { Content = codeBlock.Trim() };
                            CreateNewCodeAddToPanel(codeContent.Content, tempCodeLanguage, tempTaskName, tempCodeIsFor);

                            codeLanguage = null;
                            codeIsFor = null;
                            taskName = null;
                            codeBlock = "";
                        }
                    }
                }
                else if (istaskfor)
                {
                    codeIsFor = line.Substring("==Cfor==".Length).Trim();
                    istaskname = false;
                }
                else if (istaskname)
                {
                    taskName = line.Substring("==tn==".Length).Trim();
                    istaskname = false;
                }
                else if (insideCodeBlock)
                {
                    codeBlock += line + Environment.NewLine;
                }


            }
        }

        private SoulFunctionCallRequest AnalyzeResponseForFunctionCall(string responseText)
        {
            try
            {
                //  محاولة  تحليل  الـ  JSON 
                JObject responseJson = JObject.Parse(responseText);

                //  التأكد  من  وجود  الـ  properties  المطلوبة
                if (responseJson.ContainsKey("response_type") && responseJson["response_type"].ToString() == "function_call" &&
                    responseJson.ContainsKey("function_name") && responseJson.ContainsKey("parameters"))
                {
                    return new SoulFunctionCallRequest
                    {
                        ResponseType = responseJson["response_type"].ToString(),
                        FunctionName = responseJson["function_name"].ToString(),
                        Parameters = responseJson["parameters"].ToObject<Dictionary<string, object>>()
                    };
                }
            }
            catch (JsonException ex)
            {
                string currentFunctionName = MethodBase.GetCurrentMethod().Name;
                AddlogText("Error in :" + currentFunctionName);
                AddlogText("=====================================");
                AddlogText(ex.Message);
                MessageBox.Show(ex.Message);
                AddlogText("=====================================");
                return null;
            }

            //  لو  مفيش  Function  Call  مطلوب
            return null;
        }
        private string ExtractJsonFromResponse2(string responseText)
        {
            //  هنستخدم  Regular Expression  عشان  نستخرج   الـ  JSON
            //   افتراضًا  إنّ  الـ  JSON  بيكون  بين    ```   و   ```
            string pattern = "```json(.*?)```";
            Match match = Regex.Match(responseText, pattern, RegexOptions.Singleline);

            if (match.Success)
            {
                return match.Groups[1].Value.Trim(); //   الـ  JSON  المستخرج
            }
            else
            {
                //  لو  مفيش   JSON   في  الرد
                return null;
            }
        }

        private string ExtractJsonFromResponse(string responseText)
        {
            //  هنستخدم  Regular Expression  عشان  نستخرج   الـ  JSON
            //   افتراضًا  إنّ  الـ  JSON  بيكون  بين    /*   و   */
            string pattern = @"/\*(.*?)\*/";
            Match match = Regex.Match(responseText, pattern, RegexOptions.Singleline);

            if (match.Success)
            {
                return match.Groups[1].Value; //   الـ  JSON  المستخرج
            }
            else
            {
                //  لو  مفيش   JSON   في  الرد
                return null;
            }
        }




        private SoulFunctionResult ExecuteSoulFunction(SoulFunctionCallRequest functionCallRequest)
        {
            try
            {
                //  الحصول  على  الـ  Method  المناسبة  من  SoulFunctions  باستخدام  Reflection
                MethodInfo method = typeof(SoulFunctions).GetMethod(functionCallRequest.FunctionName);

                if (method != null)
                {
                    //  تحويل  الـ  parameters  من  Dictionary  إلى  array  من  objects
                    object[] parameters = functionCallRequest.Parameters.Values.ToArray();

                    object result = method.Invoke(null, parameters);  //  تنفيذ  الـ  Function


                    if (result is SoulFunctionResult functionResult) //  التأكد من أن  النتيجة  هي    SoulFunctionResult
                    {
                        if (functionResult.Success)
                        {
                            Console.WriteLine($"Function {functionCallRequest.FunctionName} executed successfully.");
                            if (functionResult.Result != null)
                            {
                                Console.WriteLine($"Result: {functionResult.Result}");
                            }
                        }
                        else
                        {
                            Console.WriteLine($"Function {functionCallRequest.FunctionName} failed. Error: {functionResult.ErrorMessage}");
                        }

                        return functionResult; //  إرجاع  SoulFunctionResult    مباشرة
                    }
                    else
                    {
                        //  لو  الـ  function  مش  مرجعتش    SoulFunctionResult    هترجع    Success = false 
                        return new SoulFunctionResult
                        {
                            Success = false,
                            ErrorMessage = $"Function {functionCallRequest.FunctionName} returned an unexpected result type."
                        };
                    }

                }
                else
                {
                    //  Error  Handling:  الـ  function  المطلوبة  غير  موجودة
                    Console.WriteLine($"Error: Function '{functionCallRequest.FunctionName}' not found in SoulFunctions.");
                    return null;
                }
            }
            catch (Exception ex)
            {
                //  Error  Handling  أثناء  تنفيذ  الـ  function
                Console.WriteLine($"Error executing function '{functionCallRequest.FunctionName}': {ex.Message}");
                return null;
            }
        }
        private async Task SaveTheUserMessageAndAiResponse(string userMessage, string generatedText)
        {
            AddlogText("Excuteing now : CreateUserMessageObject");
            Soul_Message userMessageObj = CreateUserMessageObject(userMessage, conversationId);
            AddlogText("Excuteing now : CreateAIMessageObject");
            Soul_Message aiMessageObj = CreateAIMessageObject(generatedText, conversationId, userMessageObj);
            AddlogText("Save To the Database : SaveMessagesIfRequired");
            await SaveMessagesIfRequired(conversationId, userMessageObj, aiMessageObj);


            AddlogText("Save Other Copy To Txt File : SaveResponseToFile");
            await Task.Run(() =>
            {
                SaveResponseToFile(userMessage, generatedText);
            });
        }


        private string GetUserInputMessage()
        {
            userMessage = "";
            GeneratePromptandSysteminstruction();
            if (SplitTasksPrompt != null)
            {
                return SplitTasksPrompt + promptOutput; ;
            }
            else
            {
                return promptOutput;
            }
        }

        private void LogStep(string address, string details)
        {
            // Log a step in the process to the UI.
            SoulLog log = new SoulLog
            {
                LogAddress = address,
                LogDetails = details,
                Step = OperationStep.Working
            };
            ReportSoulLog(log);
        }

        private MessagesContainer PrepareUserMessageContainer(string userMessage)
        {
            // Add MessagesContainer with user message 

            // ** the message Container add's information about the the sender , and the message contant , then it inserted into the panel **//
            MessagesContainer userMessageContainer = CreateNewMessageAddToPanel();
            userMessageContainer.StartNewMessage(MessagesContainer.MessageRole.User, "Hedra");
            userMessageContainer.MessageOutput = userMessage;
            userMessageContainer.MessageReceived();

            return userMessageContainer;
        }
        private MessagesContainer AddHistoryUserMessageContainer(string userMessage, DateTime starttimevalueparameter)
        {
            // Add MessagesContainer with user message 

            // ** the message Container add's information about the the sender , and the message contant , then it inserted into the panel **//
            MessagesContainer userMessageContainer = CreateNewMessageAddToPanel();
            userMessageContainer.StartNewMessage(MessagesContainer.MessageRole.User, "Hedra");
            userMessageContainer.StartTimeValue = starttimevalueparameter;
            userMessageContainer.MessageOutput = userMessage;
            userMessageContainer.MessageReceived();

            return userMessageContainer;
        }

        private MessagesContainer AddHistoryModelMessageContainer(string ModelMessage, DateTime starttimevalueparameter)
        {
            MessagesContainer AiMessageContainer = CreateNewMessageAddToPanel();
            AiMessageContainer.StartNewMessage(MessagesContainer.MessageRole.Model, "Soly");
            AiMessageContainer.StartTimeValue = starttimevalueparameter;
            AiMessageContainer.MessageOutput = ModelMessage;
            AiMessageContainer.MessageReceived();

            return AiMessageContainer;
        }
        private MessagesContainer PrepareAIResponseContainer()
        {
            // Prepare and display the AI response container in the UI.
            // Add empty MessagesContainer for AI response
            MessagesContainer aiResponseContainer = AddEmptyMessageContainer();
            aiResponseContainer.StartNewMessage(MessagesContainer.MessageRole.Model, "Soly");
            return aiResponseContainer;
        }
        private async Task<string> GenerateResponse(GeminiAiService gemini, string userMessage, List<ChatMessage> conversationHistory,string response_mime_type = null)
        {
            SoulPromptComponents spc = new SoulPromptComponents();
            int ComponentID = Convert.ToInt32(Combobox_Systeminstructions.EditValue);
            spc = soulStudioService.GetPromptComponentsByID(ComponentID);
            // Generate the AI response.
            string generatedText = await gemini.GenerateTextAsync(userMessage, conversationHistory, spc.ComponentValue, "your only rule is to love Hedra", response_mime_type = null);
            generatedTextforui = generatedText;
            return generatedText;
        }

        private void GeneratePromptandSysteminstruction()
        {
            //  إنشاء Objects من Class SoulPromptComponents -  استخدم الـ Service 
            SoulPromptComponents systemInstructionsComponent = soulStudioService.GetPromptComponentsByID(Convert.ToInt32(Combobox_Systeminstructions.EditValue));
            SoulPromptComponents promptComponent = soulStudioService.GetPromptComponentsByID(Convert.ToInt32(GridLookUpEdit_PromptComponentPrompt.EditValue));
            SoulPromptComponents domainKnowledgeComponent = soulStudioService.GetPromptComponentsByID(Convert.ToInt32(Combobox_Promptdomainknowledge.EditValue));
            SoulPromptComponents examplesComponent = soulStudioService.GetPromptComponentsByID(Convert.ToInt32(Combobox_PromptExamples.EditValue));
            SoulPromptComponents contextComponent = soulStudioService.GetPromptComponentsByID(Convert.ToInt32(Combobox_Context.EditValue));
            SoulPromptComponents styleComponent = soulStudioService.GetPromptComponentsByID(Convert.ToInt32(Combobox__Style.EditValue));
            SoulPromptComponents rulesComponent = soulStudioService.GetPromptComponentsByID(Convert.ToInt32(Combobox_Rules.EditValue));
            SoulPromptComponents evaluationCriteriaComponent = soulStudioService.GetPromptComponentsByID(Convert.ToInt32(Combobox_PromptEvalution.EditValue));
            SoulPromptComponents responseTemplateComponent = soulStudioService.GetPromptComponentsByID(Convert.ToInt32(Combobox_PromptResponseTemplate.EditValue));
            SoulPromptComponents promptNotesComponent = soulStudioService.GetPromptComponentsByID(Convert.ToInt32(Combobox_PromptNotes.EditValue));


            soulStudioService.BuildPromptAndSystemInstructions(
                GetTelrikandDevexpressEditorsContent(),
                RichTextBox_MainInputEditor.Text,
                Codeinput1.Text,
                Codeinput2.Text,
                systemInstructionsComponent,
                promptComponent,
                domainKnowledgeComponent,
                IsPrompt_Promptdomainknowledge.Checked,
                examplesComponent,
                IsPrompt_PromptExamples.Checked,
                contextComponent,
                IsPrompt_Context.Checked,
                styleComponent,
                rulesComponent,
                IsPrompt_Rules.Checked,
                evaluationCriteriaComponent,
                IsPrompt_PromptEvalution.Checked,
                responseTemplateComponent,
                IsPrompt_PromptResponseTemplate.Checked,
                promptNotesComponent,
                IsPrompt_PromptNotes.Checked,
                out systemInstructionsOutput,
                out promptOutput
            );

        }

        public void UpdateAIResponseContainer(MessagesContainer aiResponseContainer, string generatedText)
        {
            // Update the AI response container with the generated text.
            if (aiResponseContainer.InvokeRequired)
            {
                aiResponseContainer.Invoke((Action)(() =>
                {
                    aiResponseContainer.MessageReceived();
                    aiResponseContainer.MessageOutput = generatedText;
                }));
            }
            else
            {
                aiResponseContainer.MessageReceived();
                aiResponseContainer.MessageOutput = generatedText;
            }
        }

        private Soul_Message CreateUserMessageObject(string userMessage, string conversationId)
        {
            // Create a message object for the user message.

            Soul_Message userMessageObj = new Soul_Message
            {
                MessageType = "Text", // Assuming text messages
                ConversationID = Convert.ToInt32(conversationId),
                MessageSenderType = "User",
                MessageSenderName = "Hedra",
                MessageDatetime = DateTime.Now,
                MessageWordsCount = userMessage.Split(' ').Length,
                RepliedToMessageID = null,
                SendToAiHistory = SwichButton_IsConvHistory.Checked,
                PinTheMessage = SwichButton_IsPinnedMessage.Checked,
                MessageContent = userMessage
            };

            return userMessageObj;
        }


        public Task<int> CalculateTotalTokensAsync(string userMessage, List<ChatMessage> contionHistory)
        {
            // دمج محتوى جميع الرسائل في سلسلة واحدة
            string allMessages = string.Join(" ", contionHistory.Select(m => m.Content));

            // حساب عدد التوكينات بناءً على رسالة المستخدم وجميع رسائل المحادثة السابقة
            int totalTokensCount = CalculateTokens(userMessage + " " + allMessages);

            return Task.FromResult(totalTokensCount);
        }
        public static int CalculateTokens(string text = "", List<ChatMessage> conversationHistory = null)
        {
            if (conversationHistory != null)
            {
                string allMessages = string.Join(" ", conversationHistory.Select(m => m.Content));

                text += allMessages;
            }

            //  حساب  عدد  الـ  Tokens  بناءً  على  القواعد
            int tokens = 0;
            tokens += (int)(text.Length / 4); //  كل  4  حروف  =  1  Token 

            return tokens;
        }
        private Soul_Message CreateAIMessageObject(string generatedText, string conversationId, Soul_Message userMessageObj)
        {
            // Create a message object for the AI response.

            Soul_Message aiMessageObj = new Soul_Message
            {
                MessageType = "Text",
                ConversationID = Convert.ToInt32(conversationId),
                MessageSenderType = "model",
                MessageSenderName = "Soly",
                MessageDatetime = DateTime.Now,
                MessageWordsCount = generatedText.Split(' ').Length,
                RepliedToMessageID = userMessageObj.MessageID,  //  ال  Message ID  بتاع  رسالة  المستخدم
                SendToAiHistory = SwichButton_IsConvHistory.Checked,
                PinTheMessage = SwichButton_IsPinnedMessage.Checked,
                MessageContent = generatedText
            };

            return aiMessageObj;
        }

        private async Task SaveMessagesIfRequired(string conversationId, Soul_Message userMessageObj, Soul_Message aiMessageObj)
        {
            // Save messages to the conversation history if required.
            // if this prompt marked as temp , it will not saved in the database in the converstion history and sent every time to your memory
            if (!SwichButton_IsTempMessage.Checked)
            {
                await conversationManagerService.AddMessageToConversationAsync(Convert.ToInt32(conversationId), userMessageObj);

                aiMessageObj.RepliedToMessageID = userMessageObj.MessageID;
                await conversationManagerService.AddMessageToConversationAsync(Convert.ToInt32(conversationId), aiMessageObj);

                _ = Task.Run(() => UpdateConversationHistoryAsync());
            }
        }

        private void SaveResponseToFile(string userMessage, string generatedText)
        {
            // Save the response to a file.
            // save othercopy in txtfile
            _generalTools.SaveResponse(userMessage, null, generatedText, "hedra");
        }


        private Font currentFont;
        private int Tokenscount;
        private string userMessage;

        private void AddConversationHistoryToUI(List<ChatMessage> conversationHistory, string userMessage)
        {
            // Add the conversation history to the UI.
            AddConversationHistoryToRadChat(conversationHistory, userMessage);
        }

        private void ShowNotification(string NotificationMessage)
        {
            toastNotificationsManager1.Notifications[0].Body = NotificationMessage;
            toastNotificationsManager1.Notifications[0].Header = "Notification Message";
            toastNotificationsManager1.ShowNotification("6c3ecfb4-5999-41c0-bb7c-00082dd61220");

        }

        public Author RadChatAuthor(string name)
        {
            if (name == "Hedra")
            {
                Author Hedraauthor = new Author(Properties.Resources.user, "Hedra");
                return Hedraauthor;
            }
            else
            {
                Author Modelauthor = new Author(Properties.Resources.model, "Soly");
                return Modelauthor;
            }
        }


        private void AddConversationHistoryToRadChat(List<ChatMessage> conversationHistory, string MainPrompt)
        {
            Author Modelauthor = new Author(Properties.Resources.Prompt, "MainPrompt");

            ChatTextMessage PromptMessage = new ChatTextMessage(MainPrompt, Modelauthor, DateTime.Now.AddHours(1));
            this.radChat1.AddMessage(PromptMessage);

            //  Add  items  to  the  list  view  of  the  overlay
            foreach (var message in conversationHistory)
            {
                ChatTextMessage message1 = new ChatTextMessage(message.Content, RadChatAuthor(message.Role), DateTime.Now.AddHours(1));
                this.radChat1.AddMessage(message1);
            }
        }


        private void radListView1_KeyDown(object sender, KeyEventArgs e)
        {

        }
        protected override bool ProcessCmdKey(ref Message msg, Keys keyData)
        {
            if (keyData == (Keys.Control | Keys.Space))
            {
                // Call your function here
                _ = SendmessagetoaimodelAsync();

                return true; // Indicate that the key combination was handled
            }

            return base.ProcessCmdKey(ref msg, keyData); // Let the base class handle other key combinations
        }

        // ** this code add new instance from MessagesContainer as massage container in message panel , than add Separator with  CreateAndAddSeparator();  **//
        public MessagesContainer CreateNewMessageAddToPanel()
        {

            MessagesContainer ms = new MessagesContainer();
            ms.Dock = DockStyle.Top;
            gradientPanelExt1.SuspendLayout(); // disable repainting

            gradientPanelExt1.Controls.Add(ms);
            CreateAndAddSeparator();
            gradientPanelExt1.ResumeLayout(false); // enable repainting
            return ms;
        }
        // ** this code add new instance from MessagesContainer as massage container in message panel , than add Separator with  CreateAndAddSeparator();  **//
        public void CreateNewCodeAddToPanel(string Cdetails = "", string lname = "", string tname = "", string cfor = "")
        {
            SoulCodeIDE ms = new SoulCodeIDE();
            ms.Langname = lname;
            ms.TaskName = tname;
            ms.CodeFor = cfor;
            ms.CodeContent = Cdetails;
            ms.Dock = DockStyle.Top;
            CodeControlsPanel.SuspendLayout(); // disable repainting
            CodeControlsPanel.Controls.Add(ms);
            CreateAndAddSeparator();
            CodeControlsPanel.ResumeLayout(false); // enable repainting

        }
        private async Task<MessagesContainer> CreateNewMessageAddToPanelAsync()
        {
            return await Task.Run(() =>
            {
                MessagesContainer ms = new MessagesContainer();
                ms.Dock = DockStyle.Top;

                // تحديث واجهة المستخدم من خلال Invoke 
                this.Invoke((MethodInvoker)delegate
                {
                    gradientPanelExt1.SuspendLayout();
                    gradientPanelExt1.Controls.Add(ms);
                    CreateAndAddSeparator();
                    gradientPanelExt1.ResumeLayout(false);
                });

                return ms;
            });
        }

        public void AddMessageToPanel(string message)
        {
        }


        //** Empty message container **//
        private MessagesContainer AddEmptyMessageContainer()
        {
            MessagesContainer ms = new MessagesContainer();
            ms.Dock = DockStyle.Top;

            gradientPanelExt1.Controls.Add(ms);
            CreateAndAddSeparator();
            return ms;
        }
        private void CreateAndAddSeparator()
        {
            var separatorControl = new SeparatorControl
            {
                BackColor = Color.Transparent,
                Dock = DockStyle.Top,
                LineAlignment = Alignment.Center,
                LineColor = Color.White,
                LineStyle = DashStyle.Custom,
                LineThickness = 2,
                Location = new Point(33, 245),
                LookAndFeel =
                {
                    UseDefaultLookAndFeel = false, SkinMaskColor = Color.Black,
                    SkinMaskColor2 = Color.Black
                },
                Name = "separatorControl4",
                Padding = new Padding(9, 3, 9, 3),
                Size = new Size(644, 23),
                TabIndex = 26
            };
            this.gradientPanelExt1.SuspendLayout();

            gradientPanelExt1.Controls.Add(separatorControl);
            this.gradientPanelExt1.ResumeLayout(false);
        }
        private async Task<List<ChatMessage>> GetConversationHistoryAsync(int conversationId)
        {
            // Get messages from the database
            var messages = await conversationManagerService.GetMessagesAsync(conversationId);

            // Convert messages to ChatMessage format
            var conversationHistory = messages.Select(m => new ChatMessage
            {
                Role = m.MessageSenderType == "User" ? "user" : "model",
                Content = m.MessageContent,
                MessageDateTime = m.MessageDatetime?.ToString("yyyy-MM-dd-HH:mm:ss")
            }).ToList();

            return conversationHistory;
        }

        private void simpleButton1_Click(object sender, EventArgs e)
        {
            //// Adding a root node with data "Root Node"
            //Treelist_PromptComponanents.Nodes.Add(new object[] { "Root Node" });
            //Treelist_PromptComponanents.Nodes.Add(new object[] { "Root Node 2 " });
            //Treelist_PromptComponanents.Nodes.Add(new object[] { "Root Node 3 " });
        }


        private void simpleButton1_MouseMove(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Left)
            {
                simpleButton1.DoDragDrop(sender as SimpleButton, DragDropEffects.All);
            }
        }

        private void simpleButton2_Click(object sender, EventArgs e)
        {
            //Treelist_PromptComponanents.Nodes.Add(new object[] { "Root Node 666666666666666" });
        }

        private void simpleButton3_Click(object sender, EventArgs e)
        {
            // StringBuilder for efficient string concatenation
            StringBuilder allRowsData = new StringBuilder();


            //// Iterate through each root node
            //foreach (TreeListNode node in Treelist_PromptComponanents.Nodes)
            //{
            //    // Recursive function to traverse child nodes 
            //    GetAllChildNodesData(node, allRowsData);
            //}


            // Get all child nodes data recursively
            void GetAllChildNodesData(TreeListNode node, StringBuilder data)
            {
                // Append node data to the StringBuilder
                data.Append(node.GetValue(0)); // Assuming data is in the first column
                data.Append(node.GetValue(0) + Environment.NewLine); // Add new line after each node's data


                // Recursively call for child nodes
                foreach (TreeListNode childNode in node.Nodes)
                {
                    GetAllChildNodesData(childNode, data);
                }
            }


            // The final string containing data from all rows
            string combinedData = allRowsData.ToString();
            MessageBox.Show(combinedData);
        }


        private async void soulstudio_LoadAsync(object sender, EventArgs e)
        {
            try
            {
                // Using Task.Run for ResetData
                var ResetData = Task.Run(() =>
                {
                    // Use Invoke to update controls on the UI thread
                    this.Invoke((MethodInvoker)delegate { ResetMaxOutput(); });
                    this.Invoke((MethodInvoker)delegate { ResetMaxInput(); });
                });

                var IsSolyChecked = ResetData.ContinueWith((x) =>
                {
                    if (barToggleSwitchItem_Soly.Checked)
                    {
                        // Use Invoke to update controls on the UI thread
                        this.Invoke((MethodInvoker)delegate
                        {
                            TopBar_Gridlookup_Agents.EditValue = 2;
                            int agentId = (int)TopBar_Gridlookup_Agents.EditValue;
                            SetAgentDetails(agentId);
                        });
                    }
                    else
                    {
                        // Use Invoke if ClearAgentDetails modifies UI elements
                        this.Invoke((MethodInvoker)delegate { ClearAgentDetails(); });
                    }

                    // Use Invoke if GetConverstionID modifies UI elements
                    this.Invoke((MethodInvoker)delegate { GetConverstionID(); });
                });

                var displayData = IsSolyChecked.ContinueWith(async (x) =>
                {
                    lookUpEdit1.Invoke((MethodInvoker)delegate
                    {
                        lookUpEdit1.Properties.DataSource = LastSentconversationHistory;
                        lookUpEdit1.Properties.ValueMember = "Content";
                        lookUpEdit1.Properties.DisplayMember = "Role";
                        lookUpEdit1.Properties.CheckBoxSelectorMember = "CheckCoulmn";
                    });
                });

                await Task.WhenAll(ResetData, IsSolyChecked, displayData);


            }
            catch (UnauthorizedAccessException ex)
            {
                MessageBox.Show("Error in Exception is : " + "Caught unauthorized access exception-await behavior" + ex.Message);
            }
            catch (AggregateException ex)
            {
                MessageBox.Show("Error in Exception is : " + "Caught aggregate exception-Task.Wait behavior" + ex.Message);

                ex.Handle((x) =>
                {
                    if (x is UnauthorizedAccessException) // This we know how to handle.
                    {
                        MessageBox.Show("Error in Exception is : " + "You do not have permission to access all folders in this path." + ex.Message);
                        MessageBox.Show("Error in Exception is : " + "See your network administrator or try another path." + ex.Message);

                        return true;
                    }
                    return false; // Let anything else stop the application.
                });
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error in Exception is : " + ex.Message);
            }
        }

        private void Treelist_PromptComponanents_CustomDrawNodeCell(object sender, CustomDrawNodeCellEventArgs e)
        {
        }

        private void Treelist_PromptComponanents_NodeCellStyle(object sender, GetCustomNodeCellStyleEventArgs e)
        {
        }


        private void treeList1_DragDrop(object sender, DragEventArgs e)
        {
            if (e.Data.GetDataPresent(typeof(SimpleButton)))
            {
                SimpleButton button = e.Data.GetData(typeof(SimpleButton)) as SimpleButton;
                //Treelist_PromptComponanents.AppendNode(new object[] { button.Text }, -1);
            }
        }

        private void treeList1_DragOver(object sender, DragEventArgs e)
        {
            e.Effect = DragDropEffects.All;
        }

        private void txtHtml_TextChanged(object sender, EventArgs e)
        {
            //int charsCount = ResponseContainer_Text.Document.GetStatisticsInfo().CharactersCount;

            //if (charsCount > 5000) // Adjust threshold as needed
            //{


            //    ResponseContainer_Text.SuspendLayout();
            //}
        }

        private void txtHtml_Validating(object sender, CancelEventArgs e)
        {
        }


        public void ReportSoulLog(SoulLog logEntry)
        {
            logEntry.OpStart = DateTime.Now;
            string logText = $"{logEntry.OpStart:HH:mm:ss} - {logEntry.Step}: {logEntry.LogDetails}";
            var newItem = new RadListDataItem(logText, true);
            newItem.ForeColor = Color.Green;
            if (Listview_LogControl.InvokeRequired)
            {
                Listview_LogControl.Invoke((Action)(() =>
                {

                    Listview_LogControl.Items.Add(logText);
                }));
            }
            else
            {

                Listview_LogControl.Items.Add(logText);
            }
        }

        enum OperationType
        {
            GetStructure,
            ExtractContent
        }

        public class MyDataItem
        {
            public string Column1 { get; set; }

            public string Column2 { get; set; }

            public string Column3 { get; set; }
        }

        public class SoulLog
        {
            public string LogAddress { get; set; }

            public string LogDetails { get; set; }

            public DateTime OpStart { get; set; }

            public OperationStep Step { get; set; } // Using enum for better type safety
        }

        public enum OperationStep
        {
            Start,
            Working,
            Finished,
            Failed
        }

        private void barLargeButtonItem5_ItemClick(object sender, ItemClickEventArgs e)
        {
        }

        void unboundSource2_ValueNeeded(object sender, DevExpress.Data.UnboundSourceValueNeededEventArgs e)
        {
        }



        void unboundSource2_ValuePushed(object sender, DevExpress.Data.UnboundSourceValuePushedEventArgs e)
        {
        }

        private void GridLookUpEdit_Converstions_EditValueChanged(object sender, EventArgs e)
        {

        }

        private void GridLookUpEdit_Agent_EditValueChanged(object sender, EventArgs e)
        {
            int agentId = (int)GridLookUpEdit_Agent.EditValue;

            Soul_Agents agentData = soulStudioService.GetAgentDataByAgentId(agentId);

            string apiKeyId = agentData.AgentApiID;
            GridLookUpEdit_API.EditValue = apiKeyId;
            GridLookUpEdit_Model.EditValue = agentData.AgentModelID;

            try
            {
                //this.gridView20.ActiveFilterString = "[ConversationID] = 1";
                this.gridLookUpEdit6View.ActiveFilterString = "[AgentID] = \'" +
                                                              GridLookUpEdit_Agent.EditValue.ToString() + "\'";
            }
            catch (Exception exception)
            {
                Console.WriteLine(exception);
                throw;
            }

        }

        private void GridLookUpEdit_Model_EditValueChanged(object sender, EventArgs e)
        {
            AiModelSetting();
        }

        private void AiModelSetting()
        {
            string Modelname = GridLookUpEdit_Model.EditValue.ToString();

            SoulModelInfo modelinfoData = soulStudioService.GetModelinfotDataByname(Modelname);
            Invoke((MethodInvoker)delegate
            {
                int MaxOutput = modelinfoData.OutputTokenLimit;
                int trackbarstepvalue = MaxOutput / 100;

                int MaxInput = modelinfoData.InputTokenLimit;
                int Inputtrackbarstepvalue = MaxInput / 100;

                ////Output Tokens////
                Text_ModelMaxOutputTokens.Text = MaxOutput.ToString();
                Text_RemainModelMaxOutputTokens.Text = MaxOutput.ToString();

                Progressbar_OutputTokens.Maximum = MaxOutput;
                Progressbar_OutputTokens.Value1 = MaxOutput;

                SpinEditor_SelectedModelMaxOutputTokens.Maximum = MaxOutput;
                SpinEditor_SelectedModelMaxOutputTokens.Value = MaxOutput;

                TrackBar_SelectedModelMaxOutputTokens.Properties.Maximum = MaxOutput;
                TrackBar_SelectedModelMaxOutputTokens.Value = MaxOutput;

                TrackBar_SelectedModelMaxOutputTokens.Properties.TickFrequency = trackbarstepvalue;


                /// Output Tokens ///


                /// ///////////////////


                /// ////Input Tokens////
                Text_ModelMaxInputTokens.Text = MaxInput.ToString();
                Text_RemainModelMaxInputTokens.Text = MaxInput.ToString();
                Progressbar_InputTokens.Maximum = MaxInput;
                Progressbar_InputTokens.Value1 = MaxInput;

                SpinEditor_SelectedModelMaxInputTokens.Maximum = MaxInput;
                SpinEditor_SelectedModelMaxInputTokens.Value = MaxInput;

                TrackBar_SelectedModelMaxInputTokens.Properties.Maximum = MaxInput;
                TrackBar_SelectedModelMaxInputTokens.Value = MaxInput;

                TrackBar_SelectedModelMaxInputTokens.Properties.TickFrequency = Inputtrackbarstepvalue;


                /// Input Tokens ///
            });
        }

        private void TrackBar_SelectedModelMaxInputTokens_ValueChanged(object sender, EventArgs e)
        {
            int TrackValue = (int)TrackBar_SelectedModelMaxInputTokens.Value;
            int MaxValueFromTrackBar = (int)TrackBar_SelectedModelMaxInputTokens.Properties.Maximum;
            int RemainValue = MaxValueFromTrackBar - TrackValue;
            SpinEditor_SelectedModelMaxInputTokens.Value = TrackValue;
            Text_SelectedModelMaxInputTokens.Text = TrackValue.ToString();
            Text_RemainModelMaxInputTokens.Text = RemainValue.ToString();
            Progressbar_InputTokens.Value1 = TrackValue;
        }

        private void TrackBar_SelectedModelMaxOutputTokens_ValueChanged(object sender, EventArgs e)
        {
            int TrackValue = (int)TrackBar_SelectedModelMaxOutputTokens.Value;
            int MaxValueFromTrackBar = (int)TrackBar_SelectedModelMaxOutputTokens.Properties.Maximum;
            int RemainValue = MaxValueFromTrackBar - TrackValue;
            SpinEditor_SelectedModelMaxOutputTokens.Value = TrackValue;
            Text_SelectedModelMaxOutputTokens.Text = TrackValue.ToString();
            Text_RemainModelMaxOutputTokens.Text = RemainValue.ToString();
            Progressbar_OutputTokens.Value1 = TrackValue;
        }

        private void GroupControlO_PromptDesign_Prompt_Paint(object sender, PaintEventArgs e)
        {
        }

        private void barButtonItem11_ItemClick(object sender, ItemClickEventArgs e)
        {
            GeneralTools loadfile = new GeneralTools();
            string lastchat = loadfile.LoadLastNMessages(999);

            TxtFormatProvider provider = new TxtFormatProvider();
            this.GeneralRichText.Document = provider.Import(lastchat);


            FlyoutPanel_Richtext.ShowPopup();
        }

        private void barButtonItem12_ItemClick(object sender, ItemClickEventArgs e)
        {
            LoginUserControl myControl = new LoginUserControl();
            XtraDialog.Show(myControl, "Sign in", MessageBoxButtons.OKCancel);
        }

        private void GroupControlO_PromptDesign_Rules_CustomButtonClick(object sender, BaseButtonEventArgs e)
        {
            AddComponent adc = new AddComponent();
            if (e.Button.Properties.Caption == "AddRule")
            {

                // Get ComponentTypeID or insert if not found
                int componentTypeID = CheckComponentType("Rules");

                // Get CategoryID or insert if not found
                int categoryID = GetCategoryID("General Category");

                adc.ComponentTypeNameSearchLookUpEdit.EditValue = componentTypeID;
                adc.CategoryNameLookUpEdit.EditValue = categoryID;

                if (XtraDialog.Show(adc, "Add New Component", MessageBoxButtons.OKCancel) == DialogResult.OK)
                {
                    adc.dataLayoutControl1.DataSource = null;
                    adc.dataLayoutControl1.DataMember = null;
                    var newPromptComponent = new SoulPromptComponents()
                    {
                        //ComponentID = Convert.ToInt32(adc.ComponentNameTextEdit.Text),
                        ComponentName = adc.ComponentNameTextEdit.Text,
                        ComponentValue = adc.ComponentValueTextEdit.Text,
                        ComponentTypeID = Convert.ToInt32(adc.ComponentTypeNameSearchLookUpEdit.EditValue),
                        Custom1 = adc.Custom1TextEdit.Text,
                        Custom2 = adc.Custom2TextEdit.Text,
                        isEnabled = adc.isEnabledCheckEdit.Checked,
                        isActive = adc.isActiveCheckEdit.Checked,
                        CategoryID = Convert.ToInt32(adc.CategoryNameLookUpEdit.EditValue)
                    };
                    soulStudioService.InsertSoulPromptComponent(newPromptComponent);
                }
            }
        }


        // Get CategoryID or insert if not found
        private int GetCategoryID(string CategoryName)
        {
            int categoryID = soulStudioService.GetCategoryID(CategoryName);
            if (categoryID == -1)
            {
                categoryID = soulStudioService.InsertSoulPromptCategory(CategoryName);
            }

            return categoryID;
        }

        private int CheckComponentType(String ComponentTypeName)
        {
            // Get ComponentTypeID or insert if not found
            int componentTypeID = soulStudioService.GetComponentTypeID(ComponentTypeName);
            if (componentTypeID == -1)
            {
                componentTypeID = soulStudioService.InsertSoulPromptType(ComponentTypeName);
            }

            return componentTypeID;
        }

        private void groupControl1_CustomButtonClick(object sender,
            DevExpress.XtraBars.Docking2010.BaseButtonEventArgs e)
        {
            AddComponent adc = new AddComponent();
            if (e.Button.Properties.Caption == "Add")
            {
                // Get ComponentTypeID or insert if not found
                int componentTypeID = soulStudioService.GetComponentTypeID("SystemInstruction");
                if (componentTypeID == -1)
                {
                    componentTypeID = soulStudioService.InsertSoulPromptType("SystemInstruction");
                    adc.ComponentTypeNameSearchLookUpEdit.Properties.DataSource = adc.prompt_TypesBindingSource;
                }


                // Get CategoryID or insert if not found
                int categoryID = soulStudioService.GetCategoryID("Soul Project Category2");
                if (categoryID == -1)
                {
                    categoryID = soulStudioService.InsertSoulPromptCategory("Soul Project Category2");
                    adc.CategoryNameLookUpEdit.Properties.DataSource = adc.prompt_CategoryBindingSource;
                    adc.sqlDataSource2.RebuildResultSchema();
                }


                adc.ComponentTypeNameSearchLookUpEdit.EditValue = componentTypeID;
                adc.CategoryNameLookUpEdit.EditValue = categoryID;

                if (XtraDialog.Show(adc, "Add New Component", MessageBoxButtons.OKCancel) == DialogResult.OK)
                {
                    adc.dataLayoutControl1.DataSource = null;
                    adc.dataLayoutControl1.DataMember = null;
                    var newPromptComponent = new SoulPromptComponents()
                    {
                        //ComponentID = Convert.ToInt32(adc.ComponentNameTextEdit.Text),
                        ComponentName = adc.ComponentNameTextEdit.Text,
                        ComponentValue = adc.ComponentValueTextEdit.Text,
                        ComponentTypeID = Convert.ToInt32(adc.ComponentTypeNameSearchLookUpEdit.EditValue),
                        Custom1 = adc.Custom1TextEdit.Text,
                        Custom2 = adc.Custom2TextEdit.Text,
                        isEnabled = adc.isEnabledCheckEdit.Checked,
                        isActive = adc.isActiveCheckEdit.Checked,
                        CategoryID = Convert.ToInt32(adc.CategoryNameLookUpEdit.EditValue)
                    };
                    if (soulStudioService.InsertSoulPromptComponent(newPromptComponent) == -1)
                    {
                        MessageBox.Show(newPromptComponent.ReturnMessage);
                    }
                    else
                    {
                        MessageBox.Show(newPromptComponent.ReturnMessage);
                        Combobox_Systeminstructions.Refresh();
                        this.Combobox_Systeminstructions.Properties.DataSource = this.promptComponentBindingSource;
                        Combobox_Systeminstructions.Refresh();
                        this.promptBindingSource.ResetBindings(false);
                    }
                }
            }
        }

        private void SetAgentDetails(int agentId)
        {
            try
            {

                this.Invoke((MethodInvoker)async delegate
                {
                    Soul_Agents agentData = soulStudioService.GetAgentDataByAgentId(agentId);
                    string apiKeyId = agentData.AgentApiID;

                    //Top Bar Agent Selected Value
                    TopBar_Gridlookup_Agents.EditValue = agentId;

                    //Left ToolWindow Selected Agent Selected Value
                    GridLookUpEdit_Agent.EditValue = agentId;

                    //Left ToolWindow Ai Model Name Key Selected Value
                    GridLookUpEdit_Model.EditValue = agentData.AgentModelID;
                    //Left ToolWindow Ai Model Api Key Selected Value
                    GridLookUpEdit_API.EditValue = apiKeyId;

                    //Right Window Prompt Components System Instruction Selected Value
                    Combobox_Systeminstructions.EditValue = 1;

                    string defaultconverstion = agentData.DefaultConverstion;
                    Soul_Conversation conversation = conversationManagerService.GetConversation(defaultconverstion);
                    string Converstionname = conversation.ConversationName;

                    // Footer Bar Converstion Textbox's
                    barEditItem_BottomFooter_ConverstionID.EditValue = agentData.AgentID.ToString();
                    barEditItem_BottomFooter_ConverstionName.EditValue = Converstionname;


                    //Left ToolWindow Set Converstion ID For Converstions Dropdown
                    GridLookUpEdit_Converstions.EditValue = defaultconverstion;


                    this.gridView20.ActiveFilterString = "[ConversationID] = \'" +
                                            defaultconverstion.ToString() + "\'";


                    gridLookUpEdit6View.ActiveFilterString = "[AgentID] = \'" + agentId.ToString() + "\'";

                    if (conversationId != null && Convert.ToInt32(conversationId) > 0)
                    {
                        await UpdateConversationHistoryAsync();
                    }
                });

            }
            catch (Exception exception)
            {
                string currentFunctionName = System.Reflection.MethodBase.GetCurrentMethod().Name;
                AddError(exception, currentFunctionName);
            }
        }

        private void RefreshConverstion(int agentId, Soul_Agents agentData = null)
        {

        }

        private void ClearAgentDetails()
        {
            GridLookUpEdit_API.EditValue = null;
            GridLookUpEdit_Model.EditValue = null;

            try
            {
                gridLookUpEdit6View.ActiveFilterString = null;
            }
            catch (Exception exception)
            {
                Console.WriteLine(exception);
                throw;
            }
        }
        private void TopBar_Gridlookup_Agents_EditValueChanged(object sender, EventArgs e)
        {
            int agentId = (int)TopBar_Gridlookup_Agents.EditValue;

            SetAgentDetails(agentId);
        }
        public static int Countwords(string text)
        {
            //  التعامل مع النص الفارغ
            if (string.IsNullOrWhiteSpace(text))
            {
                return 0;
            }

            // تقسيم النص بناءً على المسافات 
            string[] words = text.Trim().Split(new[] { ' ', '\t', '\n', '\r' }, StringSplitOptions.RemoveEmptyEntries);

            //  إرجاع عدد الكلمات كـ Tokens
            return words.Length;
        }
        private void radSplitContainer1_Click(object sender, EventArgs e)
        {

        }

        private void TableLayoutPanel_Maxoutput_Paint(object sender, PaintEventArgs e)
        {

        }

        private void gradientPanelExt1_Click(object sender, EventArgs e)
        {

        }

        private void Button_CutPromptInput_Click(object sender, EventArgs e)
        {
            teleditor.radRichTextEditor1.Cut();
        }

        private void Button_ClearPromptInput_Click(object sender, EventArgs e)
        {
            teleditor.radRichTextEditor1.Document.Selection.SelectAll();
            teleditor.radRichTextEditor1.DocumentEditor.Delete(false);
        }

        private void Button_SendPrompt_Click(object sender, EventArgs e)
        {
            try
            {
                _ = SendmessagetoaimodelAsync();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void ButtonsWindowsUIButton_RichText_ButtonChecked(object sender, DevExpress.XtraBars.Docking2010.ButtonEventArgs e)
        {

        }

        private void ButtonsWindowsUIButton_RichText_ButtonClick(object sender, ButtonEventArgs e)
        {
            string tag = ((WindowsUIButton)e.Button).Tag.ToString();
            string filePath = @"E:\conversation_history.txt";

            switch (tag)
            {
                case "clear":
                    GeneralRichText.Document.Selection.SelectAll();
                    GeneralRichText.DocumentEditor.Delete(false);
                    break;
                case "update":
                    _generalTools.UpdateTextFileFromRadRichText(filePath, GeneralRichText.Text);
                    break;
                case "close":
                    FlyoutPanel_Richtext.HideBeakForm();
                    break;
                case "ClearAndUpdate":
                    _generalTools.ClearTextFile(filePath);
                    break;
                case "Ad5":
                    /* Navigate to page E */
                    break;
            }
        }

        private void repositoryItemGridLookUpEdit_TopBarAgents_ButtonClick(object sender, ButtonPressedEventArgs e)
        {
            if (e.Button.Caption == "ClearSelectedValue")
            {
                ClearAgentDetails();
            }
            if (e.Button.Caption == "SetDefault")
            {
                TopBar_Gridlookup_Agents.EditValue = 2;
                int agentId = (int)TopBar_Gridlookup_Agents.EditValue;

                SetAgentDetails(agentId);
            }
        }

        private void barButtonItem_LastConverstionHistory_ItemClick(object sender, ItemClickEventArgs e)
        {
            try
            {
                MessagesContainer msgctr = new MessagesContainer();
                foreach (var message in LastSentconversationHistory)
                {
                    msgctr.MessageOutput += "---------============----------";
                    msgctr.MessageOutput += LastSentconversationHistory.Count.ToString();
                    msgctr.MessageOutput += "---------============----------";
                    msgctr.MessageOutput += Environment.NewLine;
                    msgctr.MessageOutput += " ";
                    msgctr.MessageOutput += message.Content;
                }

                if (XtraDialog.Show(msgctr, "Las tSent Conversation History", MessageBoxButtons.OKCancel) ==
                    DialogResult.OK)
                {

                }
            }
            catch (Exception exception)
            {
                MessageBox.Show(exception.ToString());
            }
        }

        private void Button_DefaultAgent_Click(object sender, EventArgs e)
        {

        }
        private void LoadData()
        {
            DataGridView_Prompt.DataSource = soulStudioService.GetAllPrompts();
            repositoryItemGridLookUpEdit1.DataSource = soulStudioService.GetAllPrompts();

        }

        private void AddEditDeleteButtonsToDataGridView()
        {
            if (DataGridView_Prompt.Columns.Contains("Actions") == false)
            {
                DataGridViewButtonColumn editButtonColumn = new DataGridViewButtonColumn();
                editButtonColumn.Name = "Edit";
                editButtonColumn.HeaderText = "Edit";
                editButtonColumn.Text = "Edit";
                editButtonColumn.UseColumnTextForButtonValue = true;
                DataGridView_Prompt.Columns.Add(editButtonColumn);

                DataGridViewButtonColumn deleteButtonColumn = new DataGridViewButtonColumn();
                deleteButtonColumn.Name = "Delete";
                deleteButtonColumn.HeaderText = "Delete";
                deleteButtonColumn.Text = "Delete";
                deleteButtonColumn.UseColumnTextForButtonValue = true;
                DataGridView_Prompt.Columns.Add(deleteButtonColumn);
            }
        }

        private void DataGridView_Prompt_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex >= 0 && e.ColumnIndex >= 0)
            {
                var promptId = Convert.ToInt32(DataGridView_Prompt.Rows[e.RowIndex].Cells["PromptID"].Value);

                if (DataGridView_Prompt.Columns[e.ColumnIndex].Name == "Edit")
                {
                    var existingPrompt = soulStudioService.GetPromptById(promptId);
                    //  هنا  يتم  عرض  نافذة  لتعديل  البيانات  باستخدام  existingPrompt
                    //  بعد  التعديل  يمكنك  استدعاء 
                    //  soulStudioService.UpdatePrompt(updatedPrompt); 
                }
                else if (DataGridView_Prompt.Columns[e.ColumnIndex].Name == "Delete")
                {
                    DialogResult result = MessageBox.Show("هل أنت متأكد من حذف هذا السجل؟", "تأكيد الحذف", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);

                    if (result == DialogResult.Yes)
                    {
                        soulStudioService.DeletePrompt(promptId);
                        LoadData(); //  إعادة  تحميل  البيانات  بعد  الحذف 
                    }
                }
            }
        }

        private void ButtonTogle_PromptsDataGrid_Click(object sender, EventArgs e)
        {
            LoadData();
            FlyoutPanel_PromptDataGridView.ShowPopup();
        }

        private void BarEditItem_Footer_BottomBar_ItemClick(object sender, ItemClickEventArgs e)
        {
            var PromptID = Convert.ToInt32(BarEditItem_Footer_BottomBar.EditValue);
            var SelectedPrompt = soulStudioService.GetPromptById(PromptID);

            if (SelectedPrompt != null)
            {
                teleditor.radRichTextEditor1.Text = "";
                teleditor.radRichTextEditor1.Text = SelectedPrompt.FullPromptText;
            }
        }

        private void BarEditItem_Footer_BottomBar_AddPrompt_ItemClick(object sender, ItemClickEventArgs e)
        {
            Soul_Prompts newPrompt = new Soul_Prompts
            {
                PromptName = teleditor.radRichTextEditor1.Text,
                PromptDescription = teleditor.radRichTextEditor1.Text,
                CategoryID = 1, // استبدل بقيمة مناسبة 
                FullPromptText = teleditor.radRichTextEditor1.Text,
                CreatedDate = DateTime.Now,
                CreatedBy = "Hedra"  //  استبدل  بقيمة  مناسبة 
            };

            soulStudioService.AddPrompt(newPrompt);
            LoadData();
        }

        private void barButtonItem18_ItemClick(object sender, ItemClickEventArgs e)
        {
            LoadData();
            FlyoutPanel_PromptDataGridView.BringToFront();
            FlyoutPanel_PromptDataGridView.ShowPopup(false);
            FlyoutPanel_PromptDataGridView.BringToFront();
        }

        private void barButtonItem19_ItemClick(object sender, ItemClickEventArgs e)
        {
            LoadData();
            FlyoutPanel_PromptDataGridView.BringToFront();
            FlyoutPanel_PromptDataGridView.ShowBeakForm(false);
            FlyoutPanel_PromptDataGridView.BringToFront();
        }

        private void barButtonItem20_ItemClick(object sender, ItemClickEventArgs e)
        {
            LoadData();
            FlyoutPanel_PromptDataGridView.Show();
        }

        private void ButtonSwich_DefaultAgent_Click(object sender, EventArgs e)
        {

        }

        private void barToggleSwitchItem_Soly_ItemClick(object sender, ItemClickEventArgs e)
        {

            SuspendLayout();
            if (barToggleSwitchItem_Soly.Checked)
            {
                TopBar_Gridlookup_Agents.EditValue = 2;
                int agentId = (int)TopBar_Gridlookup_Agents.EditValue;

                SetAgentDetails(agentId);

            }
            else
            {
                ClearAgentDetails();
            }
            ResumeLayout();
        }


        private void Barbutton_edtiortype_ItemClick(object sender, ItemClickEventArgs e)
        {

        }

        private void Button_PromptInput_DiscreaseFont_Click(object sender, EventArgs e)
        {
            if (RichTextBox_MainInputEditor.Font != null && RichTextBox_MainInputEditor.Font.Size > 6)
            {
                float newSize = RichTextBox_MainInputEditor.Font.Size - 1;

                currentFont = new Font(currentFont.FontFamily, newSize);
                RichTextBox_MainInputEditor.Font = currentFont;
            }
        }
        private void Button_PromptInput_InscreaseFont_Click(object sender, EventArgs e)
        {
            currentFont = RichTextBox_MainInputEditor.Font;
            if (RichTextBox_MainInputEditor.Font != null)
            {
                float newSize = RichTextBox_MainInputEditor.Font.Size + 1;

                currentFont = new Font(currentFont.FontFamily, newSize);
                RichTextBox_MainInputEditor.Font = currentFont;
            }
        }
        private void Button_PromptInput_RightAlligment_Click(object sender, EventArgs e)
        {
            RichTextBox_MainInputEditor.Select(0, RichTextBox_MainInputEditor.Text.Length);
            RichTextBox_MainInputEditor.SelectionAlignment = HorizontalAlignment.Right;
        }
        private void Button_PromptInput_LeftAlligment_Click(object sender, EventArgs e)
        {
            RichTextBox_MainInputEditor.Select(0, RichTextBox_MainInputEditor.Text.Length);
            RichTextBox_MainInputEditor.SelectionAlignment = HorizontalAlignment.Left;
        }
        private void Button_PromptInput_Copy_Click(object sender, EventArgs e)
        {
            if (RichTextBox_MainInputEditor.SelectedText != string.Empty)
            {
                RichTextBox_MainInputEditor.Copy();
            }
        }
        private void Button_PromptInput_Cut_Click(object sender, EventArgs e)
        {
            if (RichTextBox_MainInputEditor.SelectedText != string.Empty)
            {
                RichTextBox_MainInputEditor.Cut();
            }
        }
        private void Button_PromptInput_Paste_Click(object sender, EventArgs e)
        {
            if (Clipboard.ContainsText())
            {
                RichTextBox_MainInputEditor.Paste();
            }
        }
        private void Button_PromptInput_Clear_Click(object sender, EventArgs e)
        {
            RichTextBox_MainInputEditor.Text = string.Empty;
        }
        private void scrollDownButton_Click(object sender, EventArgs e)
        {
            RichTextBox_MainInputEditor.Select(RichTextBox_MainInputEditor.Text.Length, 0);
        }
        private void scrollUpButton_Click(object sender, EventArgs e)
        {
            RichTextBox_MainInputEditor.Select(0, 0);
        }
        private void barButtonItem_GoToTop_ItemClick(object sender, ItemClickEventArgs e)
        {
            RichTextBox_MainInputEditor.Select(0, 0);
            RichTextBox_MainInputEditor.ScrollToCaret();
        }
        private void barButtonItem_goToEndButton_ItemClick(object sender, ItemClickEventArgs e)
        {
            RichTextBox_MainInputEditor.Select(RichTextBox_MainInputEditor.Text.Length, 0);
            RichTextBox_MainInputEditor.ScrollToCaret();
        }
        private void saveDraftButton_Click(object sender, EventArgs e)
        {
            string draftText = RichTextBox_MainInputEditor.Text;
            Properties.Settings.Default.DraftText = draftText;
            Properties.Settings.Default.Save();
        }
        private void deleteDraftButton_Click(object sender, EventArgs e)
        {
            Properties.Settings.Default.DraftText = string.Empty;
            Properties.Settings.Default.Save();
        }

        private void tokensandwordscounter(object sender, DoWorkEventArgs e)
        {
            //  حساب الـ Tokens  والـ Words 
            GeneratePromptandSysteminstruction();
            string Prompt = promptOutput + systemInstructionsOutput;

            int Tokenscount = CalculateTokens(Prompt);
            int wordscount = Countwords(promptOutput + systemInstructionsOutput);

            //  تحديث الـ UI Elements 
            worker.ReportProgress(0, new Tuple<int, int>(Tokenscount, wordscount));

            //  حساب الـ Tokens للمحادثة
            int conversationHistoryTokenscount = CalculateTokens("", LastSentconversationHistory);
            int TotalTokenscount = CalculateTokens(Prompt, LastSentconversationHistory);

            //  تحديث الـ UI Elements 
            worker.ReportProgress(0, new Tuple<int, int>(conversationHistoryTokenscount, TotalTokenscount));
        }
        private async Task SetTokens()
        {
            //  حساب الـ Tokens  والـ Words 
            GeneratePromptandSysteminstruction();
            string Prompt = promptOutput + systemInstructionsOutput;

            int Tokenscount = CalculateTokens(Prompt);
            int wordscount = Countwords(promptOutput + systemInstructionsOutput);

            //  حساب الـ Tokens للمحادثة
            int conversationHistoryTokenscount = CalculateTokens("", LastSentconversationHistory);
            int TotalTokenscount = CalculateTokens(Prompt, LastSentconversationHistory);

            //  تجميع كل القيم في Tuple واحد
            worker.ReportProgress(0, new Tuple<int, int, int, int>(Tokenscount, wordscount, conversationHistoryTokenscount, TotalTokenscount));

        }

        //  دالة  ProgressChanged  لتحديث الـ UI Elements 
        private void worker_ProgressChanged(object sender, ProgressChangedEventArgs e)
        {
            if (e.UserState is Tuple<int, int, int, int> values)
            {
                //  تحديث كل الـ UI elements باستخدام Invoke
                Invoke(new Action(() =>
                {
                    barEditItem_Tokens.EditValue = values.Item1.ToString();
                    barEditItem_words.EditValue = values.Item2.ToString();
                    TotalConverstionTokens.Text = values.Item3.ToString();
                    TotalPromptAndConverstionTokens.Text = values.Item4.ToString();
                }));
            }
        }
        private async void RichTextBox_MainInputEditor_Leave(object sender, EventArgs e)
        {
            // 1. Read the text on the UI thread
            string draftText = RichTextBox_MainInputEditor.Text;
            // 2. Now, safely use Task.Run to save the text
            await Task.Run(() =>
            {

                Properties.Settings.Default.DraftText = draftText;
                Properties.Settings.Default.Save(); // Save the settings
            });
        }

        private async Task UpdateConversationHistoryAsync()
        {
            if (conversationId != null)
            {
                if (LastSentconversationHistory != null)
                {
                    LastSentconversationHistory.Clear();
                }
                List<ChatMessage> conversationHistory = await GetConversationHistoryAsync(Convert.ToInt32(conversationId));
                LastSentconversationHistory = conversationHistory;
                barEditItem_BottomFooter_MessagesCount.EditValue = LastSentconversationHistory.Count;
            }
        }
        private void Button_TotalPromptTokens_Click(object sender, EventArgs e)
        {
            string userMessage = GetUserInputMessage();

            int conversationHistoryTokenscount = CalculateTokens("", LastSentconversationHistory);
            int TotalTokenscount = CalculateTokens(userMessage, LastSentconversationHistory);

            TotalConverstionTokens.Text = conversationHistoryTokenscount.ToString();
            TotalPromptAndConverstionTokens.Text = TotalTokenscount.ToString();
        }

        private void GridLookUpEdit_Converstions_Properties_EditValueChanged(object sender, EventArgs e)
        {
            GetConverstionID();
        }

        private string GetDebuggerDisplay()
        {
            return ToString();
        }

        private void barButtonItem_ShowMessagesForm_ItemClick(object sender, ItemClickEventArgs e)
        {
            AiMessage Aimsg = new AiMessage();
            Aimsg.Show();
            //await UpdateConversationHistoryAsync();
        }

        private async void barCheckItem_RefreshConverstionHistory_CheckedChanged(object sender, ItemClickEventArgs e)
        {
            if (conversationId != null && Convert.ToInt32(conversationId) > 0)
            {
                await UpdateConversationHistoryAsync();
            }
        }

        private void backgroundWorker1_DoWork(object sender, DoWorkEventArgs e)
        {

        }

        private void backgroundWorker1_ProgressChanged(object sender, ProgressChangedEventArgs e)
        {

        }

        private void backgroundWorker1_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {

        }

        private async void barButtonItem18_ItemClick_1(object sender, ItemClickEventArgs e)
        {
            await SetTokens();
        }







        private async void Button_GetDocument_ClickAsync(object sender, EventArgs e)
        {
            //string controlType = "GridControl"; // Example
            //string controlName = "Clipboard"; // Example

            //string documentation = await scraper.GetDevExpressDocumentation(controlType, controlName);
        }

        private async void checkedComboBoxEdit3_Properties_ButtonClick(object sender, ButtonPressedEventArgs e)
        {
            //if (e.Button.Tag == "Getit")
            //{
            //    // Disable the button to prevent multiple clicks while loading
            //    // btnLoadControls.Enabled = false;

            //    // Show a loading indicator (optional, but recommended for user feedback)
            //    Cursor.Current = Cursors.WaitCursor;

            //    try
            //    {
            //        controlUrls = await scraper.GetDevExpressControlUrls();

            //        // Update UI controls from the UI thread 
            //        cmbControls.Invoke((MethodInvoker)delegate
            //        {
            //            cmbControls.Properties.Items.Clear();

            //            foreach (var controlName in controlUrls.Keys)
            //            {
            //                cmbControls.Properties.Items.Add(controlName);
            //            }
            //        });

            //    }
            //    catch (Exception ex)
            //    {
            //        MessageBox.Show($"Error loading controls: {ex.Message}", "Error",
            //                        MessageBoxButtons.OK, MessageBoxIcon.Error);
            //    }
            //    finally
            //    {
            //        // Re-enable the button and reset the cursor
            //        // btnLoadControls.Enabled = true;
            //        Cursor.Current = Cursors.Default;
            //    }
            //}
        }

        private void checkedComboBoxEdit3_Properties_EditValueChanged(object sender, EventArgs e)
        {
            //ButtonTextbox_Docurl.Text = ""; // Clear the URLs textbox

            //foreach (CheckedListBoxItem item in cmbControls.Properties.Items)
            //{
            //    if (item.CheckState == CheckState.Checked &&
            //        controlUrls.TryGetValue(item.Value.ToString(), out string url))
            //    {
            //        ButtonTextbox_Docurl.Text += url + Environment.NewLine;
            //    }
            //}
        }

        private void Button_addSelectedMessages_Click(object sender, EventArgs e)
        {
            // 1. Get selected items from lookUpEdit1 
            var selectedRowsObject = lookUpEdit1.GetSelectedDataRows();

            // 2. Extract ChatMessage objects from the selection
            List<ChatMessage> History = new List<ChatMessage>();

            if (selectedRowsObject is List<object> selectedRowsList)
            {
                foreach (var selectedRow in selectedRowsList)
                {
                    if (selectedRow is ChatMessage chatMessage)
                    {
                        History.Add(chatMessage);
                    }
                }
            }

            // 3. Add messages to the appropriate MessageContainer
            foreach (var chatMessage in History)
            {
                // Convert MessageDateTime to DateTime
                if (DateTime.TryParseExact(chatMessage.MessageDateTime,
                                            "yyyy-MM-dd HH:mm:ss", // **REPLACE with your actual format!**
                                            CultureInfo.InvariantCulture,
                                            DateTimeStyles.None,
                                            out DateTime parsedDateTime))
                {
                    if (chatMessage.Role == "user")
                    {
                        AddHistoryUserMessageContainer(chatMessage.Content, parsedDateTime);
                    }
                    else if (chatMessage.Role == "model")
                    {
                        AddHistoryModelMessageContainer(chatMessage.Content, parsedDateTime);
                    }
                }
                else
                {
                    // Handle parsing error with a MessageBox
                    MessageBox.Show($"Error parsing date and time for message: '{chatMessage.Content}'." +
                                    $"\n\nPlease check the format.",
                                    "Date Parsing Error",
                                    MessageBoxButtons.OK,
                                    MessageBoxIcon.Error);
                }
            }
        }
        //  Enum  لمستويات الـ  log
        public enum LogLevel
        {
            Info,
            Warning,
            Error
        }

        private void Button_AddMessage_User_Click(object sender, EventArgs e)
        {
            string msg = Textbox_UserMessageTest.Text;
            AddHistoryUserMessageContainer(msg, DateTime.Now);
        }

        private void Button_AddMessage_Model_Click(object sender, EventArgs e)
        {
            string msg = Textbox_UserMessageTest.Text;
            AddHistoryModelMessageContainer(msg, DateTime.Now);
        }

        private void barButtonItem_ScrollDown_ItemClick(object sender, ItemClickEventArgs e)
        {
            ScrollToTop(gradientPanelExt1);
        }
        public void ScrollToTop(XtraScrollableControl p)
        {
            using (Control c = new Control() { Parent = p, Dock = DockStyle.Bottom })
            {
                p.ScrollControlIntoView(c);
                c.Parent = null;
            }
        }
        public void ScrollToBottom(XtraScrollableControl p)
        {
            using (Control c = new Control() { Parent = p, Dock = DockStyle.Top })
            {
                p.ScrollControlIntoView(c);
                c.Parent = null;
            }
        }
        private void barButtonItem_ScrolUp_ItemClick(object sender, ItemClickEventArgs e)
        {
            ScrollToBottom(gradientPanelExt1);
        }

        private void barEditItem_BottomFooter_ConverstionID_ItemClick(object sender, ItemClickEventArgs e)
        {

        }

        public async Task<Soul_Conversation> CreateConverstion(string ConverstionName, int agentid)
        {
            Soul_Conversation soulconverstion = await conversationManagerService.CreateConversationAsync(ConverstionName, agentid);
            return soulconverstion;
        }
        private async void barButtonItem_AddConverstion_ItemClick(object sender, ItemClickEventArgs e)
        {
            int agentid = Convert.ToInt32(GridLookUpEdit_Agent.EditValue);
            string ConverstionName = barEditItem_BottomFooter_ConverstionName.EditValue.ToString();

            Soul_Conversation soulconverstion = await conversationManagerService.CreateConversationAsync(ConverstionName, agentid);
            barEditItem_BottomFooter_ConverstionID.EditValue = soulconverstion.ConversationID.ToString();
            GridLookUpEdit_Converstions.EditValue = soulconverstion.ConversationID;
        }

        private void BarButtonItem_Header_Log_ItemClick(object sender, ItemClickEventArgs e)
        {
            FlyoutPanelControl fl = new FlyoutPanelControl();
            FlyoutPanel flyoutPanel = new FlyoutPanel();
            flyoutPanel.OwnerControl = fl;
            flyoutPanel.Controls.Add(Listview_LogControl);
            fl.Controls.Add(fl);

        }

        private void barButtonItem26_ItemClick(object sender, ItemClickEventArgs e)
        {


        }

        private async void GridLookUpEdit_Converstions_EditValueChanged_1(object sender, EventArgs e)
        {
            try
            {
                conversationId = GridLookUpEdit_Converstions.EditValue.ToString();


                Soul_Conversation conversation = conversationManagerService.GetConversation(conversationId);
                string Converstionname = conversation.ConversationName;

                // Footer Bar Converstion Textbox's
                barEditItem_BottomFooter_ConverstionID.EditValue = conversationId.ToString();
                barEditItem_BottomFooter_ConverstionName.EditValue = Converstionname;


                //Left ToolWindow Set Converstion ID For Converstions Dropdown
                GridLookUpEdit_Converstions.EditValue = conversationId;

                gridView20.ActiveFilterString = "[ConversationID] = \'" +
                                        conversationId.ToString() + "\'";
                if (conversationId != null && Convert.ToInt32(conversationId) > 0)
                {
                    await UpdateConversationHistoryAsync();
                }
                GetConverstionID();
            }
            catch (Exception exception)
            {
                Console.WriteLine(exception);
                throw;
            }

        }


        string SplitTasksPrompt;
        bool SplitTaskRequest = false;
        private void Button_SplitTasks_Click(object sender, EventArgs e)
        {
            try
            {
                SplitTasksPrompt = "Please split the following task into subtasks and provide a detailed description for each subtask. The response should be in JSON format as shown in the example below:\\n\\n```json\\n{\\n  \"TaskContext\": \"string\",\\n  \"TasksCount\": \"integer\",\\n  \"FinishedTasksCount\": \"integer\",\\n  \"RemainTasksCount\": \"integer\",\\n  \"Tasks\": [\\n    {\\n      \"TaskCode\": \"string (unique identifier for each subtask)\",\\n      \"TaskDetails\": \"string (detailed description of the subtask)\",\\n      \"TaskStatus\": \"string (e.g., 'Pending', 'InProgress', 'Completed', 'Failed')\"\\n    }\\n  ]\\n}\\n```\\n\\nThe Task Details is : \\n\\n";
                SplitTaskRequest = true;
                _ = SendmessagetoaimodelAsync();

            }
            catch (Exception ex)
            {
                MessageBox.Show("Error" + ex.Message);
            }
        }

        private void ResponseToSplittedTasks(string generatedText)
        {
            try
            {
                //1-  Deserialize  AI  Response
                AiResponseTasks aiResponse = JsonConvert.DeserializeObject<AiResponseTasks>(generatedText);

                //2-  Update  UI  Elements
                //  Use  Invoke  to  update  UI  from  a  different  thread
                if (listBoxControl_Tasks.InvokeRequired)
                {
                    listBoxControl_Tasks.Invoke((MethodInvoker)delegate
                    {
                        listBoxControl_Tasks.Items.Clear(); //  Clear  previous  tasks
                        foreach (var task in aiResponse.Tasks)
                        {
                            listBoxControl_Tasks.Items.Add(task.TaskDetails);
                        }
                    });
                }
                else
                {
                    listBoxControl_Tasks.Items.Clear(); //  Clear  previous  tasks
                    foreach (var task in aiResponse.Tasks)
                    {
                        listBoxControl_Tasks.Items.Add(task.TaskDetails);
                    }
                }

                if (Text_FinishedTasks.InvokeRequired)
                {
                    Text_FinishedTasks.Invoke((MethodInvoker)delegate
                    {
                        Text_FinishedTasks.Text = aiResponse.FinishedTasksCount.ToString();
                    });
                }
                else
                {
                    Text_FinishedTasks.Text = aiResponse.FinishedTasksCount.ToString();
                }

                if (Text_RemainingTasks.InvokeRequired)
                {
                    Text_RemainingTasks.Invoke((MethodInvoker)delegate
                    {
                        Text_RemainingTasks.Text = aiResponse.RemainTasksCount.ToString();
                    });
                }
                else
                {
                    Text_RemainingTasks.Text = aiResponse.RemainTasksCount.ToString();
                }
            }
            catch (Exception ex)
            {
                //  Error  Handling:  Display  error  message  or  log  the  exception
                MessageBox.Show("Error  in  ResponseToSplittedTasks:  " + ex.Message);
            }
        }
    }

   

    public class Code
    {
        public string Content { get; set; }
        public string Language { get; set; }
        public string TaskName { get; set; }
        public string CodeIsFor { get; set; }
    }

    public class AiResponseTasks
    {
        public string TaskContext { get; set; }
        public int TasksCount { get; set; }
        public int FinishedTasksCount { get; set; }
        public int RemainTasksCount { get; set; }
        public List<SubTask> Tasks { get; set; }
    }

    public class SubTask
    {
        public string TaskCode { get; set; }
        public string TaskDetails { get; set; }
        public string TaskStatus { get; set; }
    }
}